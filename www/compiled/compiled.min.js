const renderEvent=new Event("render");const updateEvent=new Event("updateData");const initEvent=new Event("initData");storedTemplates={};proxyBackedVariables={};document.addEventListener("DOMContentLoaded",function(){document.dispatchEvent(renderEvent);});function interpolateTemplate(element,data){for(let attr of Array.from(element.attributes)){Object.keys(data).forEach((key)=>{element.setAttribute(attr.name,attr.value.replaceAll("{{"+key+"}}",data[key]));});}
[...element.childNodes].forEach((node)=>{if(node.innerHTML!==undefined&&node.innerHTML!==null&&node.innerHTML.trim()!==""){Object.keys(data).forEach((key)=>{node.innerHTML=node.innerHTML.replaceAll("{{"+key+"}}","<span data-reference='"+key+"'>"+data[key]+"</span>");});}else if(node.nodeType===Node.ELEMENT_NODE){interpolateTemplate(node,data);}});}
function getTemplate(fileName){if(Object.hasOwn(storedTemplates,fileName)==false){var xmlHttp=new XMLHttpRequest();xmlHttp.open("GET",fileName,false);xmlHttp.send(null);var html=xmlHttp.responseText;let res=htmlToElement(html);storedTemplates[fileName]=res;}
return storedTemplates[fileName].cloneNode(true);}
function mergeAttributes(fromNode,toNode){for(let attr of fromNode.attributes){const name=attr.name;const value=attr.value;const existing=toNode.getAttribute(attr.name)||"";const merged=new Set([...existing.trim().split(/\s+/),...value.trim().split(/\s+/),]);toNode.setAttribute(name,[...merged].filter(Boolean).join(" "));}}
function htmlToElement(html){var template=document.createElement("template");html=html.trim();template.innerHTML=html;return template.content.firstChild;}
function handleRenderEvent(self,templateName){return function(){var template=getTemplate(templateName);if(!self._originalTemplateHTML){self._originalTemplateHTML=template.innerHTML;}
mergeAttributes(template,self);if(template.getElementsByTagName("slot").length>0){var slot=template.getElementsByTagName("slot")[0].parentNode;template.getElementsByTagName("slot")[0].remove();Array.from(self.children).forEach((child)=>{slot.appendChild(child);});}
Array.from(template.children).forEach((child)=>{self.appendChild(child);});if(typeof self.customOnload==="function"){self.customOnload();}};}
function handleInitDataEvent(self){return function(){const templateData=self.getAttribute("data-template");var data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);for(var i=0;i<data.length;i++){let tempNode=self.cloneNode(true);tempNode.setAttribute("data-template",templateData+"["+i+"]");self.insertAdjacentElement("beforebegin",tempNode);}
if(data.length>1){self.remove();}}}
if(data!=null&&data!=undefined){interpolateTemplate(self,data);}};}
function debounce(fn,delay){let timer=null;return function(...args){clearTimeout(timer);timer=setTimeout(()=>fn.apply(this,args),delay);};}
(function setupInitDataMutationObserver(){const DEBOUNCE_DELAY=10;const debouncedInit=debounce(()=>{console.log("[LOG] Dispatching debounced initData event after DOM mutation");document.dispatchEvent(initEvent);},DEBOUNCE_DELAY);const observer=new MutationObserver(()=>{debouncedInit();});if(document.body){observer.observe(document.body,{childList:true,subtree:true,attributes:true,});}else{document.addEventListener("DOMContentLoaded",function(){observer.observe(document.body,{childList:true,subtree:true,attributes:true,});});}})();class template_0 extends HTMLDivElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-carousel-caption.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-carousel-caption",template_0,{extends:"div"});class template_1 extends HTMLDivElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-carousel-container.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){let id=this.getAttribute("id")
let carouselItems=this.querySelectorAll("[is=bs-carousel-item]");var button=document.createElement("button")
button.setAttribute("type","button");let one=document.querySelectorAll(".carousel-indicators");for(var i=0;i<carouselItems.length;i++){let tempButton=button.cloneNode(true)
if(i==0){tempButton.setAttribute("aria-current","true");tempButton.setAttribute("class","active");tempButton.setAttribute("aria-label","slide"+i+1);}
tempButton.setAttribute("data-bs-slide-to",""+i);tempButton.setAttribute("data-bs-target",id);one[0].appendChild(tempButton)};;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-carousel-container",template_1,{extends:"div"});class template_2 extends HTMLDivElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-carousel-item.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-carousel-item",template_2,{extends:"div"});class template_3 extends HTMLDivElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-container.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-container",template_3,{extends:"div"});class template_4 extends HTMLLIElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-navbar-item.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-navbar-item",template_4,{extends:"li"});class template_5 extends HTMLElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-navbar.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-navbar",template_5,{extends:"nav"});class template_6 extends HTMLElement{updater=null;constructor(){super();document.addEventListener("render",handleRenderEvent(this,"/template/bs-section.html"),{once:true});document.addEventListener("initData",handleInitDataEvent(this),{once:true,});}
customOnload(){;}
connectedCallback(){this._updateDataHandler=function(){console.log("----------------Update Data Handler Called----------------");const templateData=this.getAttribute("data-template");let data;if(templateData){if(templateData.trim().startsWith("{")){data=new Function(`return (${templateData})`)();}else{eval("data = "+templateData);}}
console.log("data is:",data);if(data!=null&&data!=undefined){interpolateTemplate(this,data);}else{console.log("[updateDataHandler] No data found to update for",this);}}.bind(this);document.addEventListener("updateData",this._updateDataHandler);}
disconnectedCallback(){if(this._updateDataHandler){document.removeEventListener("updateData",this._updateDataHandler);}}
static get observedAttributes(){return["data-template"];}
attributeChangedCallback(name,oldValue,newValue){if(oldValue!=newValue){if(updateEvent.eventPhase==0){document.dispatchEvent(updateEvent);}}}}
customElements.define("bs-section",template_6,{extends:"section"});